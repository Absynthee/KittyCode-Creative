---
import Badge from "@/components/ui/Badge.astro";
import Button from "@/components/ui/Button.astro";
import { Image } from "astro:assets";
import { Monitor, Github } from "@lucide/astro";

// Import all project images
import kittycodeImage from "@/assets/images/kittycode-creative.webp";
import cookieImage from "@/assets/images/ctrlaltcookie.webp";
import huddleImage from "@/assets/images/huddle.webp";
import kevinaiImage from "@/assets/images/kevin-ai.webp";
import mohImage from "@/assets/images/ministry-of-hair.webp";
import satImage from "@/assets/images/steam-achievement-tracker.webp";
import calcImage from "@/assets/images/react-calculator.webp";
import templeSpa from "@/assets/images/temple-spa.webp";
import tobostCertified from "@/assets/images/tobost-certified.webp";
import austinPortfolio from "@/assets/images/austin-portfolio-v2.webp";

import projectPlaceholder from "@/assets/placeholder.webp"; // fallback
// Add more imports as needed
// import anotherProject from "@/assets/images/another-project.webp";

// Create image mapping
const imageMap: Record<string, ImageMetadata> = {
  "kittycode-creative": kittycodeImage,
  ctrlaltcookie: cookieImage,
  huddle: huddleImage,
  "kevin-ai": kevinaiImage,
  "ministry-of-hair": mohImage,
  "steam-achievement-tracker": satImage,
  "react-calc": calcImage,
  "temple-spa": templeSpa,
  "tobost-certified": tobostCertified,
  "austin-portfolio-v2": austinPortfolio,
  placeholder: projectPlaceholder,
  // Add more mappings as needed
  // "another-project": anotherProject,
};

interface Props {
  name: string;
  project: Array<{
    title: string;
    description: string;
    image?: string;
    githubLink?: string;
    liveLink?: string;
    tag: Array<string>;
    class?: string;
    id?: string;
  }>;
}

const { name, project } = Astro.props;

// Helper function to get image
function getProjectImage(imageKey?: string): ImageMetadata {
  if (!imageKey) return imageMap["placeholder"];
  return imageMap[imageKey] || imageMap["placeholder"];
}
---

<section id="projects" class="project-section" aria-labelledby="projects-title">
  <h2 class="projects-heading" id="projects-title">
    {name}
  </h2>

  <div class="projects-container">
    {
      project.slice(0, 7).map((item, index) => (
        <article class="project-item" style={`--delay: ${index * 0.1}s`}>
          <div class="project-content">
            <h3 class="project-title">{item.title}</h3>
            <p class="project-description">{item.description}</p>

            {/* Only show project-links if at least one link exists */}
            {(item.githubLink || item.liveLink) && (
              <div class="project-links">
                {item.githubLink && (
                  <Button
                    target="_blank"
                    href={item.githubLink}
                    size={index >= 4 ? "small" : undefined}
                  >
                    <Github />
                    Source
                  </Button>
                )}
                {item.liveLink && (
                  <Button
                    target="_blank"
                    variant="secondary"
                    href={item.liveLink}
                    size={index >= 4 ? "small" : undefined}
                  >
                    <Monitor /> Live
                  </Button>
                )}
              </div>
            )}

            {/* Tags for this project */}
            <div class="project-tags">
              {item.tag.map((tagItem) => (
                <Badge variant="outline">{tagItem}</Badge>
              ))}
            </div>
          </div>
          <div class="project-image">
            <Image
              src={getProjectImage(item.image)}
              alt={`Mockup of ${item.title} project`}
              width={1920}
              height={1080}
              format="webp"
              quality={100}
              loading={index < 2 ? "eager" : "lazy"}
              class="project-screenshot"
            />{" "}
          </div>
        </article>
      ))
    }
  </div>
</section>

<style>
  #projects {
    padding: 3rem 0;
    background: var(--background);
    width: 100%;
    transition: all 0.3s ease-in-out;
  }

  .projects-heading {
    text-align: center;
    position: relative;
    transform: translateX(calc(-46px / 2));
    margin-bottom: 2rem;
  }

  .projects-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    max-width: 1600px;
    margin: 0 auto;
    padding: 0 3rem;
  }

  .project-item {
    padding: 2rem 1rem;
    gap: 2rem;
    background: hsl(from var(--secondary) h s l / 0.1);
    border: 1px solid hsl(from var(--border) h s l / 0.1);
    border-radius: var(--radius);
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    transition: all 0.3s ease-in-out;

    /* First 4 projects span full width */
    &:nth-child(-n + 4) {
      grid-column: 1 / -1;
    }

    /* Animations for first 4 projects - alternating left/right */
    &:nth-child(odd):nth-child(-n + 4) {
      animation: slideInLeft 0.6s ease-out var(--delay) both;
      .project-content {
        order: 2;
      }
      .project-image {
        order: 1;
      }
    }

    &:nth-child(even):nth-child(-n + 4) {
      animation: slideInRight 0.6s ease-out var(--delay) both;
    }

    /* Projects 5-7 are single column with slide up animation */
    &:nth-child(n + 5) {
      text-align: center;
      grid-template-columns: 1fr;
      animation: slideInUp 0.6s ease-out var(--delay) both;

      .project-content {
        order: 1;
        /* gap: 1rem; */

        .project-links {
          flex-wrap: wrap;
          gap: 0;
          justify-content: center;
          margin: auto;

          .btn {
            margin-inline: 0.5rem;
          }
        }

        .project-description {
          display: none;
        }
      }

      .project-image {
        order: 2;
      }
    }
  }

  .project-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 1rem;
  }

  .project-title {
  }

  .project-description {
    max-width: 70ch;
    color: hsl(from var(--foreground) h s l / 0.7);
  }

  .project-links {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .project-image {
    position: relative;
    aspect-ratio: 16/9;
    place-self: center;
    border-radius: var(--radius);
    overflow: hidden;
    background: linear-gradient(
      135deg,
      hsl(from var(--primary) h s l / 0.1),
      hsl(from var(--Red) h s l / 0.05)
    );
    border: 1px solid hsl(from var(--border) h s l / 0.05);
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .project-image:hover img {
    transform: scale(1.05);
  }

  lord-icon {
    padding-top: 8px;
    padding-right: 62px;
    height: 54px !important;
    width: 54px !important;
  }

  /* Animations */
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 1200px) {
    .project-item {
      .project-links {
        gap: 0;

        .btn {
          margin-inline: 0.5rem;
        }
      }

      &:nth-child(n + 5) {
        display: none;
      }
    }
  }

  @media (max-width: 900px) {
    .projects-container {
      grid-template-columns: 1fr;
      padding: 0 1rem;
    }

    .project-item {
      grid-template-columns: 1fr;
      text-align: center;

      .project-links {
        justify-content: center;
      }

      &:nth-child(-n + 4) {
        grid-column: 1 / -1;
      }

      &:nth-child(even):nth-child(-n + 4) {
        .project-content {
          order: 2;
        }
        .project-image {
          order: 1;
        }
      }

      .project-content {
        gap: 1rem;
      }
    }
  }

  @media (max-width: 768px) {
    #projects {
      display: grid;
      gap: var(--space-l);
    }

    .projects-heading {
      margin-bottom: 0;
    }
  }

  @media (max-width: 640px) {
    .project-item {
      padding: unset;

      .project-links {
        gap: 0;

        .btn--medium {
          padding: 0.375rem 0.75rem;
          font-size: var(--step--2);
          line-height: var(--space-m);
          min-width: 11em;
        }
      }
    }
  }
</style>
