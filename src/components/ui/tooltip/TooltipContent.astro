---
type TooltipSide = "top" | "right" | "bottom" | "left";
type TooltipAlign = "start" | "center" | "end";

interface Props {
  side?: TooltipSide;
  align?: TooltipAlign;
  sideOffset?: number;
  avoidCollisions?: boolean;
  animationDuration?: number;
  class?: string;
}

const {
  side = "top",
  align = "center",
  sideOffset = 4,
  avoidCollisions = true,
  animationDuration = 150,
  class: className = "",
} = Astro.props;

const contentId = `tooltip-content-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class={`tooltip-content ${className}`}
  data-side={side}
  data-align={align}
  data-side-offset={sideOffset}
  data-avoid-collisions={avoidCollisions}
  data-animation-duration={animationDuration}
  data-state="closed"
  id={contentId}
  role="tooltip"
  style={`--animation-duration: ${animationDuration}ms`}
>
  <div class="tooltip-content-inner">
    <slot />
  </div>
  <div class="tooltip-arrow" data-side={side}></div>
</div>

<style>
  .tooltip-content {
    position: fixed;
    z-index: 9999;
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    padding: 0.5rem 0.75rem;
    font-size: var(--step--2);
    line-height: 1.4;
    color: var(--foreground);
    box-shadow: 0 4px 12px hsl(from var(--foreground) h s l / 0.15);
    backdrop-filter: blur(8px);
    max-width: 260px;
    word-wrap: break-word;

    /* Animation properties */
    opacity: 0;
    transform: scale(0.95);
    transition:
      opacity var(--animation-duration, 150ms) ease,
      transform var(--animation-duration, 150ms) ease;

    /* Initially hidden */
    visibility: hidden;
    pointer-events: none;
    top: 0;
    left: 0;
  }

  .tooltip-content[data-state="open"] {
    opacity: 1;
    transform: scale(1);
    visibility: visible;
    pointer-events: auto;
  }

  .tooltip-content-inner {
    position: relative;
    z-index: 1;
  }

  /* Tooltip Arrow */
  .tooltip-arrow {
    position: absolute;
    width: 8px;
    height: 8px;
    background: var(--background);
    border: 1px solid var(--border);
    transform: rotate(45deg);
    z-index: -1;
  }

  /* Arrow positioning based on side */
  .tooltip-arrow[data-side="top"] {
    bottom: -5px;
    left: 50%;
    margin-left: -4px;
    border-top: none;
    border-left: none;
  }

  .tooltip-arrow[data-side="bottom"] {
    top: -5px;
    left: 50%;
    margin-left: -4px;
    border-bottom: none;
    border-right: none;
  }

  .tooltip-arrow[data-side="left"] {
    right: -5px;
    top: 50%;
    margin-top: -4px;
    border-left: none;
    border-bottom: none;
  }

  .tooltip-arrow[data-side="right"] {
    left: -5px;
    top: 50%;
    margin-top: -4px;
    border-right: none;
    border-top: none;
  }

  /* Arrow positioning when side changes due to collision detection */
  .tooltip-content[data-actual-side="top"] .tooltip-arrow {
    bottom: -5px;
    top: auto;
    left: 50%;
    right: auto;
    margin-left: -4px;
    margin-top: 0;
    border-top: none;
    border-left: none;
    border-bottom: 1px solid var(--border);
    border-right: 1px solid var(--border);
  }

  .tooltip-content[data-actual-side="bottom"] .tooltip-arrow {
    top: -5px;
    bottom: auto;
    left: 50%;
    right: auto;
    margin-left: -4px;
    margin-top: 0;
    border-bottom: none;
    border-right: none;
    border-top: 1px solid var(--border);
    border-left: 1px solid var(--border);
  }

  .tooltip-content[data-actual-side="left"] .tooltip-arrow {
    right: -5px;
    left: auto;
    top: 50%;
    bottom: auto;
    margin-top: -4px;
    margin-left: 0;
    border-left: none;
    border-bottom: none;
    border-right: 1px solid var(--border);
    border-top: 1px solid var(--border);
  }

  .tooltip-content[data-actual-side="right"] .tooltip-arrow {
    left: -5px;
    right: auto;
    top: 50%;
    bottom: auto;
    margin-top: -4px;
    margin-left: 0;
    border-right: none;
    border-top: none;
    border-left: 1px solid var(--border);
    border-bottom: 1px solid var(--border);
  }

  /* Dark mode adjustments */
  :global(.dark) .tooltip-content {
    background: hsl(from var(--background) h s calc(l + 5%));
    box-shadow: 0 4px 12px hsl(from var(--background) h s l / 0.4);
  }

  :global(.dark) .tooltip-arrow {
    background: hsl(from var(--background) h s calc(l + 5%));
  }

  /* Responsive design */
  @media screen and (max-width: 768px) {
    .tooltip-content {
      max-width: 200px;
      font-size: var(--step--3);
      padding: 0.375rem 0.5rem;
    }
  }
</style>
