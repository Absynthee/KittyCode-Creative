---
export interface Props {
  variant?:
    | "default"
    | "primary"
    | "secondary"
    | "info"
    | "success"
    | "warning"
    | "error";
  size?: "small" | "medium" | "large";
  placeholder?: string;
  value?: string;
  name?: string;
  id?: string;
  rows?: number;
  cols?: number;
  disabled?: boolean;
  required?: boolean;
  readonly?: boolean;
  resize?: "none" | "both" | "horizontal" | "vertical" | "auto";
  maxLength?: number;
  showCharCount?: boolean;
  autoResize?: boolean;
  class?: string;
  style?: string;
}

const {
  variant = "default",
  size = "medium",
  placeholder,
  value,
  name,
  id,
  rows = 4,
  cols,
  disabled = false,
  required = false,
  readonly = false,
  resize = "vertical",
  maxLength,
  showCharCount = false,
  autoResize = false,
  class: className = "",
  ...rest
} = Astro.props;

const baseClasses = "textarea";
const variantClass = `textarea--${variant}`;
const sizeClass = `textarea--${size}`;
const resizeClass = `textarea--resize-${resize}`;
const disabledClass = disabled ? "textarea--disabled" : "";
const readonlyClass = readonly ? "textarea--readonly" : "";
const autoResizeClass = autoResize ? "textarea--auto-resize" : "";

const classes = [
  baseClasses,
  variantClass,
  sizeClass,
  resizeClass,
  disabledClass,
  readonlyClass,
  autoResizeClass,
  className,
]
  .filter(Boolean)
  .join(" ");

const textareaId = id || `textarea-${Math.random().toString(36).substr(2, 9)}`;
const charCountId = showCharCount ? `${textareaId}-char-count` : undefined;
---

<script>
  import {
    getHTMLElements,
    getTextAreaElement,
    getHTMLElement,
    getElementAttribute,
    setElementStyle,
    addElementClass,
    removeElementClass,
    isTextAreaElement,
  } from "@/lib/utils";

  document.addEventListener("DOMContentLoaded", () => {
    const textareas = getHTMLElements(".textarea");

    textareas.forEach((textareaElement) => {
      const textarea = isTextAreaElement(textareaElement)
        ? textareaElement
        : getTextAreaElement(".textarea", textareaElement);
      if (!textarea) return;

      // At this point, we know textarea is not null
      const safeTextarea = textarea!;

      const isAutoResize = safeTextarea.classList.contains(
        "textarea--auto-resize"
      );
      const maxLengthAttr = getElementAttribute(safeTextarea, "maxlength");
      const maxLength = maxLengthAttr ? parseInt(maxLengthAttr) : 0;
      const showCharCount = safeTextarea.hasAttribute("data-show-char-count");
      const ariaDescribedBy = getElementAttribute(
        safeTextarea,
        "aria-describedby"
      );
      const charCountElement =
        showCharCount && ariaDescribedBy
          ? getHTMLElement(`#${ariaDescribedBy}`)
          : null;

      // Auto-resize functionality
      if (isAutoResize) {
        function autoResize() {
          setElementStyle(safeTextarea, "height", "auto");
          setElementStyle(
            safeTextarea,
            "height",
            `${safeTextarea.scrollHeight}px`
          );
        }

        // Initial resize
        autoResize();

        // Resize on input
        safeTextarea.addEventListener("input", autoResize);

        // Resize on window resize
        window.addEventListener("resize", autoResize);
      }

      // Character count functionality
      if (showCharCount && charCountElement) {
        // At this point, we know charCountElement is not null
        const safeCharCountElement = charCountElement!;

        function updateCharCount() {
          const currentLength = safeTextarea.value.length;

          if (maxLength) {
            safeCharCountElement.textContent = `${currentLength}/${maxLength}`;

            // Update styling based on character limit
            if (currentLength >= maxLength * 0.9) {
              addElementClass(safeCharCountElement, "char-count--warning");
            } else {
              removeElementClass(safeCharCountElement, "char-count--warning");
            }

            if (currentLength >= maxLength) {
              addElementClass(safeCharCountElement, "char-count--error");
            } else {
              removeElementClass(safeCharCountElement, "char-count--error");
            }
          } else {
            safeCharCountElement.textContent = `${currentLength} characters`;
          }
        }

        // Initial count
        updateCharCount();

        // Update on input
        safeTextarea.addEventListener("input", updateCharCount);
      }
    });
  });
</script>

<div class="textarea-wrapper">
  <textarea
    {placeholder}
    {name}
    {id}
    {rows}
    {cols}
    {disabled}
    {required}
    {readonly}
    maxlength={maxLength}
    class={classes}
    aria-describedby={charCountId}
    data-show-char-count={showCharCount}
    {...rest}>{value}</textarea
  >

  {
    showCharCount && (
      <div class="char-count" id={charCountId}>
        {maxLength ? `0/${maxLength}` : "0 characters"}
      </div>
    )
  }
</div>

<style>
  /* Wrapper for textarea and character count */
  .textarea-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    width: 100%;
  }

  /* Base Textarea Styles */
  .textarea {
    display: block;
    width: 100%;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    background: var(--background);
    color: var(--foreground);
    font-size: var(--step-0);
    font-weight: 400;
    font-family: inherit;
    line-height: 1.5;
    transition: all 0.2s ease;
    outline: none;
    margin-block: var(--space-3xs);
  }

  .textarea::placeholder {
    color: hsl(from var(--foreground) h s l / 0.5);
  }

  .textarea:hover {
    border-color: hsl(from var(--border) h s l / 0.8);
  }

  .textarea:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.2);
  }

  .textarea:focus-visible {
    outline: 2px solid var(--Red);
    outline-offset: 2px;
  }

  .textarea--disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: hsl(from var(--background) h s l / 0.5);
  }

  .textarea--disabled:hover {
    border-color: var(--border);
  }

  .textarea--readonly {
    background: hsl(from var(--background) h s l / 0.8);
    cursor: default;
  }

  /* Resize Options */
  .textarea--resize-none {
    resize: none;
  }

  .textarea--resize-both {
    resize: both;
  }

  .textarea--resize-horizontal {
    resize: horizontal;
  }

  .textarea--resize-vertical {
    resize: vertical;
  }

  .textarea--resize-auto {
    resize: none; /* Auto-resize handles this */
  }

  /* Auto-resize specific styles */
  .textarea--auto-resize {
    resize: none;
    overflow: hidden;
    min-height: 2.5rem;
  }

  /* Size Variants */
  .textarea--small {
    padding: 0.375rem 0.75rem;
    font-size: var(--step--2);
    min-height: 2rem;
  }

  .textarea--medium {
    padding: 0.5rem 1rem;
    font-size: var(--step--1);
    min-height: 2.5rem;
  }

  .textarea--large {
    padding: 0.75rem 1.5rem;
    font-size: var(--step-0);
    min-height: 3rem;
  }

  /* Style Variants */
  .textarea--default {
    background: hsl(from var(--primary) h s l / 0.05);
    border-color: hsl(from var(--border) h s l / 0.3);
  }

  .textarea--default:focus {
    background: var(--background);
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.15);
  }

  .textarea--primary {
    border-color: var(--primary);
  }

  .textarea--primary:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.2);
  }

  .textarea--secondary {
    border-color: var(--secondary);
  }

  .textarea--secondary:focus {
    border-color: var(--secondary);
    box-shadow: 0 0 0 2px hsl(from var(--secondary) h s l / 0.2);
  }

  .textarea--info {
    border-color: var(--info);
  }

  .textarea--info:focus {
    border-color: var(--info);
    box-shadow: 0 0 0 2px hsl(from var(--info) h s l / 0.2);
  }

  .textarea--success {
    border-color: var(--success);
  }

  .textarea--success:focus {
    border-color: var(--success);
    box-shadow: 0 0 0 2px hsl(from var(--success) h s l / 0.2);
  }

  .textarea--warning {
    border-color: var(--warning);
  }

  .textarea--warning:focus {
    border-color: var(--warning);
    box-shadow: 0 0 0 2px hsl(from var(--warning) h s l / 0.2);
  }

  .textarea--error {
    border-color: var(--error);
  }

  .textarea--error:focus {
    border-color: var(--error);
    box-shadow: 0 0 0 2px hsl(from var(--error) h s l / 0.2);
  }

  /* Character Count Styles */
  .char-count {
    font-size: var(--step--2);
    color: hsl(from var(--foreground) h s l / 0.6);
    text-align: right;
    margin-top: 0.25rem;
    transition: color 0.2s ease;
  }

  .char-count--warning {
    color: var(--warning);
  }

  .char-count--error {
    color: var(--error);
    font-weight: 500;
  }

  /* Responsive adjustments */
  @media screen and (max-width: 768px) {
    .textarea--large {
      padding: 0.625rem 1.25rem;
      min-height: 2.75rem;
    }
  }
</style>
