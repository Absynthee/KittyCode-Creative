---
interface Props {
  variant?:
    | "default"
    | "primary"
    | "secondary"
    | "info"
    | "success"
    | "warning"
    | "error";
  size?: "small" | "medium" | "large";
  disabled?: boolean;
  class?: string;
}

const {
  variant = "default",
  size = "medium",
  disabled = false,
  class: className = "",
} = Astro.props;

const baseClasses = "select-trigger";
const variantClass = `select-trigger--${variant}`;
const sizeClass = `select-trigger--${size}`;
const disabledClass = disabled ? "select-trigger--disabled" : "";

const classes = [baseClasses, variantClass, sizeClass, disabledClass, className]
  .filter(Boolean)
  .join(" ");
---

<button
  type="button"
  class={classes}
  aria-haspopup="listbox"
  aria-expanded="false"
  disabled={disabled}
>
  <slot />
  <svg
    class="select-chevron"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
  >
    <path d="M6 9l6 6 6-6"></path>
  </svg>
</button>

<style>
  .select-trigger {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    background: var(--background);
    color: var(--foreground);
    font-size: var(--step-0);
    font-weight: 400;
    cursor: pointer;
    transition: all 0.2s ease;
    outline: none;
    margin-block: var(--space-3xs);
    gap: 0.5rem;
  }

  .select-trigger:hover:not(.select-trigger--disabled) {
    border-color: hsl(from var(--border) h s l / 0.8);
  }

  .select-trigger:focus:not(.select-trigger--disabled) {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.2);
  }

  .select-trigger:focus-visible {
    outline: 2px solid var(--Red);
    outline-offset: 2px;
  }

  .select-trigger--disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: hsl(from var(--background) h s l / 0.5);
  }

  .select-chevron {
    flex-shrink: 0;
    transition: transform 0.2s ease;
    color: hsl(from var(--foreground) h s l / 0.6);
  }

  .select-trigger[aria-expanded="true"] .select-chevron {
    transform: rotate(180deg);
  }

  /* Size Variants */
  .select-trigger--small {
    padding: 0.375rem 0.75rem;
    font-size: var(--step--2);
    line-height: var(--space-m);
    min-height: 2rem;
  }

  .select-trigger--medium {
    padding: 0.5rem 1rem;
    font-size: var(--step--1);
    line-height: var(--space-m);
    min-height: 2.5rem;
  }

  .select-trigger--large {
    padding: 0.75rem 1.5rem;
    font-size: var(--step-0);
    line-height: var(--space-m);
    min-height: 3rem;
  }

  /* Style Variants */
  .select-trigger--default {
    background: hsl(from var(--primary) h s l / 0.05);
    border-color: hsl(from var(--border) h s l / 0.3);
  }

  .select-trigger--default:focus {
    background: var(--background);
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.15);
  }

  .select-trigger--primary {
    border-color: var(--primary);
  }

  .select-trigger--primary:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px hsl(from var(--primary) h s l / 0.2);
  }

  .select-trigger--secondary {
    border-color: var(--secondary);
  }

  .select-trigger--secondary:focus {
    border-color: var(--secondary);
    box-shadow: 0 0 0 2px hsl(from var(--secondary) h s l / 0.2);
  }

  .select-trigger--info {
    border-color: var(--info);
  }

  .select-trigger--info:focus {
    border-color: var(--info);
    box-shadow: 0 0 0 2px hsl(from var(--info) h s l / 0.2);
  }

  .select-trigger--success {
    border-color: var(--success);
  }

  .select-trigger--success:focus {
    border-color: var(--success);
    box-shadow: 0 0 0 2px hsl(from var(--success) h s l / 0.2);
  }

  .select-trigger--warning {
    border-color: var(--warning);
  }

  .select-trigger--warning:focus {
    border-color: var(--warning);
    box-shadow: 0 0 0 2px hsl(from var(--warning) h s l / 0.2);
  }

  .select-trigger--error {
    border-color: var(--error);
  }

  .select-trigger--error:focus {
    border-color: var(--error);
    box-shadow: 0 0 0 2px hsl(from var(--error) h s l / 0.2);
  }

  /* Responsive adjustments */
  @media screen and (max-width: 768px) {
    .select-trigger--large {
      padding: 0.625rem 1.25rem;
      min-height: 2.75rem;
    }
  }
</style>
